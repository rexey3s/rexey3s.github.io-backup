<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Network Securtiy | Fighting Dreamer]]></title>
  <link href="http://chuongdang.com/blog/categories/network-securtiy/atom.xml" rel="self"/>
  <link href="http://chuongdang.com/"/>
  <updated>2015-01-29T20:17:41+07:00</updated>
  <id>http://chuongdang.com/</id>
  <author>
    <name><![CDATA[Chuong Dang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advanced Network Security Note - 3rd Day of Class]]></title>
    <link href="http://chuongdang.com/blog/2014/08/20/third-day-of-advancded-network-security-class"/>
    <updated>2014-08-20T00:00:00+07:00</updated>
    <id>http://chuongdang.com/blog/2014/08/20/third-day-of-advancded-network-security-class</id>
    <content type="html"><![CDATA[<h3 id="authentication-and-authorization-in-network-security">Authentication and Authorization in Network Security</h3>

<ul class="text-justify">
  <li>Authentication is determining who someone is</li>
  <li>Authorization is determining someone is allowed to do something</li>
  <li>Authorization usually depends one authentication, which properly is not sufficient</li>
</ul>

<!-- more -->

<h3 id="perimeter-of-defense-and-networks-firewall">Perimeter of Defense and networks: Firewall</h3>

<h4 id="perimeter-defense">Perimeter Defense</h4>

<ul class="text-justify">
  <li>The idea is building an impenetrable perimeter around something valueable to protect it</li>
  <li>History of perimeter defense : castle, fortress, The Great Wall of China, etc.</li>
  <li>But they were all failed because of perimeter defense’s weaknesses</li>
</ul>

<h4 id="weaknesses-of-perimeter-defense-models">Weaknesses of Perimeter Defense models</h4>

<ul class="text-justify">
  <li>Breaching the perimeter compromises all security</li>
  <li>2 major assumptions:
    <ul>
      <li>The barrier is impenetrable (It usually isn’t)</li>
      <li>We can carefully control the entrance and exit points (we often can’t)</li>
    </ul>
  </li>
</ul>

<h3 id="what-is-firewall-">What is Firewall ?</h3>
<ul>
  <li>A machine to protect a network from malicious external attacks</li>
</ul>

<h4 id="some-types-of-firewall">Some types of Firewall</h4>

<h5 id="filtering-gateways-filtering-firewall">Filtering Gateways (Filtering firewall)</h5>

<ul class="text-justify">
  <li>Based on packet header information, either let packet go through or reject it</li>
  <li>Stateless firewall</li>
</ul>

<table class="table table-hover">
  <thead>
    <tr>
      <th style="text-align: left">Pros.</th>
      <th style="text-align: left">Cons.</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code>Fast</code></td>
      <td style="text-align: left"><code>Limited capabilities</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code>Cheap</code></td>
      <td style="text-align: left"><code>Depend on header authentication</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code>Flexiable</code></td>
      <td style="text-align: left"><code>Generally poor logging</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code>Transparent</code></td>
      <td style="text-align: left"><code>May rely on router security</code></td>
    </tr>
  </tbody>
</table>

<h5 id="application-level-gateway-proxy-firewallgateway">Application Level Gateway (proxy firewall/gateway)</h5>
<ul>
  <li>Firewalls that understand the application-level details of network traffic</li>
  <li>stateful firewall</li>
</ul>

<table class="table table-hover">
  <thead>
    <tr>
      <th style="text-align: left">Pros.</th>
      <th style="text-align: left">Cons.</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code>Highly flexiable</code></td>
      <td style="text-align: left"><code>Slower</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code>Good Logging</code></td>
      <td style="text-align: left"><code>More complex and expensive</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code>Content-based filtering</code></td>
      <td style="text-align: left"><code>Highly dependent on proxy quality</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code>Potentially transparent </code></td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Network Security Note - 3rd Day of Class - Afternoon]]></title>
    <link href="http://chuongdang.com/blog/2014/08/20/afternoon-third-day-of-advanced-network-security-class"/>
    <updated>2014-08-20T00:00:00+07:00</updated>
    <id>http://chuongdang.com/blog/2014/08/20/afternoon-third-day-of-advanced-network-security-class</id>
    <content type="html"><![CDATA[<p><code>Today's class was a very interested topic DDos :))</code></p>

<h2 id="denial-of-service-attacks">Denial of Service Attacks</h2>
<ul>
  <li>The only goal is make the service unavailable to legitimate users</li>
</ul>

<h3 id="attacker-motivation">Attacker Motivation</h3>
<ul>
  <li>Sometimes extortion</li>
  <li>Sometimes political in nature</li>
  <li>Sometimes personal feuds</li>
  <li>Sometimes as distractions (to other kind of attacks)</li>
  <li>Many others</li>
</ul>

<!-- more -->

<h3 id="ways-of-dos-attacks">Ways of DOS attacks</h3>
<ul>
  <li>Can be acheived in a lot of  ways. E.g,
    <ul>
      <li>shutdown the power source of the target</li>
      <li>crash your machine</li>
      <li>crash your router</li>
      <li>use up a key machine or network resource</li>
    </ul>
  </li>
  <li>Using up resource is the most common approach
    <ul>
      <li>network bandwidth</li>
      <li>processing power</li>
      <li>RAM</li>
      <li>Network stack resources
        <ul>
          <li>E.g., records of open connections (<code>TCP connections via SYN flood</code>)</li>
        </ul>
      </li>
      <li>OS or application resources
        <ul>
          <li>E.g., entries in a hash table</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="simple-denial-of-service-attacks">Simple Denial of Service Attacks</h3>

<ul>
  <li>One machine tries to overload another machine
    <ul>
      <li>E.g., send more packets than the target can handle</li>
    </ul>
  </li>
  <li>There is a fundamental problem for attacker:
    <ul>
      <li><em>Attacker’s machine must be more powerful than the target machine</em></li>
      <li><em>Otherwise, the attack machine can’t generate enought packets</em></li>
    </ul>
  </li>
  <li><em>Sovling</em>  this problem by 2 possibilities:
1.<em>Find a way to make the target pay more per message than the attacker</em>
    <ol>
      <li><em>Use more than one machine to attack</em></li>
    </ol>
  </li>
</ul>

<h4 id="make-the-target-pay-more">1.Make the target pay more</h4>

<h5 id="denial-of-service-and-asymmetry">Denial of Service and Asymmetry</h5>

<ul class="text-justify">
  <li>sometimes generating a request is cheaper than formulating a repsonse</li>
  <li>If so, one attack machine can generate a lot of requests and effectively multiply its power</li>
  <li>E.g., send random garbage packets to machine expectig encrypted packets (obviously it have to decrypt those packets, which is an expensive process)</li>
  <li>Not always possible to achieve this asymmetry but often can be done</li>
</ul>

<h4 id="an-example-is-syn-flood">An example is SYN Flood</h4>

<ul class="text-justify">
  <li>TCP is connection-oriented</li>
  <li>Endpoints must keep information about current tcp conn. for detecting loss of packet and doing flow contronl and managing congestion</li>
  <li>Typically kept in a table of <strong>fixed size</strong> - <em>so attack this table not the bandwidth</em></li>
</ul>

<h5 id="the-tcp-open-connection-table">The TCP open connection table</h5>

<ul class="text-justify">
  <li>Design to support many TCP connections at a time.E.g., for high volume web server</li>
  <li>One entry per conn.</li>
  <li>reuse an entry once the connection ends</li>
  <li>some legitimate conns. will be slow</li>
</ul>

<h5 id="the-basic-of-attack">The basic of attack</h5>

<ul class="text-justify">
  <li>Attacker uses initial req/resp to start tcp sessions</li>
  <li>then he abandons them</li>
  <li>target keeps them open for a while</li>
  <li>Filling up the server’s open connection table and prevening new real tcp sessions</li>
</ul>

<h5 id="how-to-defense">How to defense</h5>

<ol class="text-justify">
  <li>Don’t let the attacker take too many open connection slots
    <ul>
      <li>Maybe restrict to 3 or 4 slots per IP addr</li>
      <li>Doesn’t help if attacker has a lot of machines and attacker spoofs IP addr</li>
    </ul>
  </li>
  <li>Drops unused conns. more aggressively
    <ul>
      <li>so half-open conns, don’t waste the resource as long</li>
      <li>bad impact on legitimate clients</li>
    </ul>
  </li>
  <li>Save most of your slots for good IP addr, but how about IP Spoofing</li>
  <li>Make attacker pay more
    <ul>
      <li>he must pay sth for getting the open conns. table entry</li>
      <li>if the cost is high enough, he can’t afford to fill my table</li>
      <li>so, what <em>currency</em> can we make him pay in ?</li>
      <li>The solution is using SYN Cookies</li>
    </ul>
  </li>
</ol>

<ul class="text-justify">
  <li>Good aspects of this approach
    <ul>
      <li>doesn’t change tcp protocol</li>
      <li>doesn’t require clients to do anything</li>
      <li>doesn’t require server to save any information</li>
      <li>can be turned on and off easily</li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
