Prefix(:=<http://www.semanticweb.org/pseudo/ontologies/2014/7/transport.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(swrl:=<http://www.w3.org/2003/11/swrl#>)
Prefix(swrlb:=<http://www.w3.org/2003/11/swrlb#>)


Ontology(<http://www.semanticweb.org/pseudo/ontologies/2014/7/transport.owl>
Import(<http://sqwrl.stanford.edu/ontologies/built-ins/3.4/sqwrl.owl>)
Import(<http://www.w3.org/2003/11/swrlb>)

Declaration(Class(:Aircraft))
Declaration(Class(:Axile))
Declaration(Class(:Bike))
Declaration(Class(:Boat))
Declaration(Class(:Body))
Declaration(Class(:Bus))
Declaration(Class(:Car))
Declaration(Class(:Cargo))
Declaration(Class(:CargoAircraft))
Declaration(Class(:Cruiser))
Declaration(Class(:Diesel))
Declaration(Class(:Driver))
Declaration(Class(:ElectricEngine))
Declaration(Class(:Engine))
Declaration(Class(:FighterAircraft))
Declaration(Class(:FixedWing))
Declaration(Class(:FreightTrain))
Declaration(Class(:FreightWagon))
Declaration(Class(:Helicopter))
Declaration(Class(:HoverCraft))
Declaration(Class(:ICE))
Declaration(Class(:LocomotiveUnit))
Declaration(Class(:More_Cargo))
Declaration(Class(:Motorcycle))
Declaration(Class(:NarrowBody))
Declaration(Class(:OnRoadAndOffRoadVehicle))
Declaration(Class(:Passenger))
Declaration(Class(:PassengerAircraft))
Declaration(Class(:PassengerTrain))
Declaration(Class(:PassengerWagon))
Declaration(Class(:People))
Declaration(Class(:Pilot))
Declaration(Class(:RailWayTransport))
Declaration(Class(:Rotor))
Declaration(Class(:RotorSystem))
Declaration(Class(:ShipAndVessel))
Declaration(Class(:Sprocket))
Declaration(Class(:Steam))
Declaration(Class(:Truck))
Declaration(Class(:Vehicle))
Declaration(Class(:VehicleComponent))
Declaration(Class(:Vessel))
Declaration(Class(:Wagon))
Declaration(Class(:Weapon))
Declaration(Class(:Wheel))
Declaration(Class(:WideBody))
Declaration(Class(:Wing))
Declaration(Class(:WingAircraft))
Declaration(ObjectProperty(:canBeCarriedBy))
Declaration(ObjectProperty(:canCarry))
Declaration(ObjectProperty(:hasParts))
Declaration(ObjectProperty(:isPartOf))
Declaration(ObjectProperty(:moveOn))
Declaration(DataProperty(:canCarry))
Declaration(DataProperty(:canCarryCargo))
Declaration(DataProperty(:canCarryNumberOf))
Declaration(DataProperty(:canCarryNumberOfPassenger))
Declaration(DataProperty(:canCarryPassenger))
Declaration(DataProperty(:canCarryTheAmountOfCargo))
Declaration(DataProperty(:canMoveOnOrIn))
Declaration(DataProperty(:hasNumberOf))
Declaration(DataProperty(:hasNumberOfRotors))
Declaration(DataProperty(:hasNumberOfSeats))
Declaration(DataProperty(:hasNumberOfWheels))
Declaration(DataProperty(:hasNumberOfWings))
Declaration(NamedIndividual(:A10))
Declaration(NamedIndividual(:Airbus_A380))
Declaration(NamedIndividual(:AudiQ7))
Declaration(NamedIndividual(:BMWi5))
Declaration(NamedIndividual(:CoaxialRotorSystem))
Declaration(NamedIndividual(:Container))
Declaration(NamedIndividual(:DualRotorsSystem))
Declaration(NamedIndividual(:EC145))
Declaration(NamedIndividual(:F16))
Declaration(NamedIndividual(:Freightliner_M2))
Declaration(NamedIndividual(:HellfireMissile))
Declaration(NamedIndividual(:HondaCBR250))
Declaration(NamedIndividual(:HondaDream))
Declaration(NamedIndividual(:Lifeboat))
Declaration(NamedIndividual(:MachineGun))
Declaration(NamedIndividual(:Martin107))
Declaration(NamedIndividual(:Minivan))
Declaration(NamedIndividual(:NOTARsystem))
Declaration(NamedIndividual(:QueenMarry2))
Declaration(NamedIndividual(:SingleCylinder))
Declaration(NamedIndividual(:StraightWing))
Declaration(NamedIndividual(:SweptWing))
Declaration(NamedIndividual(:SwingWing))
Declaration(NamedIndividual(:TandemRotorsSystem))
Declaration(NamedIndividual(:Titanic))
Declaration(NamedIndividual(:YellowBus))
Declaration(AnnotationProperty(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl>))
Declaration(AnnotationProperty(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg>))
Declaration(AnnotationProperty(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg>))
Declaration(AnnotationProperty(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl>))
Declaration(AnnotationProperty(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg>))
Declaration(AnnotationProperty(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg>))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Aircraft "Aircraft")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Aircraft "Aircraft")
EquivalentClasses(:Aircraft ObjectIntersectionOf(DataHasValue(:canMoveOnOrIn "Sky") :Vehicle))
SubClassOf(:Aircraft :Vehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Axile "Axile")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Axile "Axiles")
SubClassOf(:Axile :VehicleComponent)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Bike "Bike")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Bike "Bikes")
SubClassOf(:Bike :OnRoadAndOffRoadVehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Boat "Boat")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Boat "Boats")
SubClassOf(:Boat :ShipAndVessel)
SubClassOf(:Boat ObjectSomeValuesFrom(:canCarry :Passenger))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Body "Bodies")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Body "Body")
SubClassOf(:Body :VehicleComponent)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Bus "Busses")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Bus "Bus")
SubClassOf(:Bus :OnRoadAndOffRoadVehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Car "Cars")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Car "Car")
SubClassOf(:Car :OnRoadAndOffRoadVehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Cargo "Cargos")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Cargo "Cargo")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :CargoAircraft "CargoAircraft")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :CargoAircraft "CargoAircrafts")
EquivalentClasses(:CargoAircraft ObjectIntersectionOf(ObjectAllValuesFrom(:canCarry :Cargo) :Aircraft))
SubClassOf(:CargoAircraft :Aircraft)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Cruiser "Cruisers")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Cruiser "Cruiser")
SubClassOf(:Cruiser :ShipAndVessel)
SubClassOf(:Cruiser ObjectSomeValuesFrom(:canCarry :Passenger))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Diesel "Diesel")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Diesel "Diesels")
SubClassOf(:Diesel :Engine)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Driver "Drivers")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Driver "Driver")
SubClassOf(:Driver :People)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :ElectricEngine "ElectricEngines")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :ElectricEngine "ElectricEngine")
SubClassOf(:ElectricEngine :Engine)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Engine "Engine")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Engine "Engines")
SubClassOf(:Engine :VehicleComponent)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :FighterAircraft "FighterAircrafts")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :FighterAircraft "FighterAircraft")
SubClassOf(:FighterAircraft :Aircraft)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :FixedWing "FixedWing")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :FixedWing "FixedWings")
SubClassOf(:FixedWing :Wing)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :FreightTrain "FreightTrains")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :FreightTrain "FreightTrain")
EquivalentClasses(:FreightTrain ObjectIntersectionOf(:RailWayTransport ObjectSomeValuesFrom(:hasParts :FreightWagon) ObjectSomeValuesFrom(:hasParts :LocomotiveUnit)))
SubClassOf(:FreightTrain :RailWayTransport)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :FreightWagon "FreightWagons")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :FreightWagon "FreightWagon")
EquivalentClasses(:FreightWagon ObjectIntersectionOf(ObjectSomeValuesFrom(:canCarry :Cargo) :Wagon))
SubClassOf(:FreightWagon :Wagon)
DisjointClasses(:FreightWagon :PassengerWagon)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Helicopter "Helicopter")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Helicopter "Helicopters")
SubClassOf(:Helicopter :Aircraft)
SubClassOf(:Helicopter ObjectComplementOf(ObjectSomeValuesFrom(:hasParts :FixedWing)))
DisjointClasses(:Helicopter :WingAircraft)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :HoverCraft "HoverCraft")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :HoverCraft "HoverCraft")
EquivalentClasses(:HoverCraft ObjectIntersectionOf(DataHasValue(:canMoveOnOrIn "Water") DataHasValue(:canMoveOnOrIn "OnRoadOrOffRoad")))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :ICE "ICEs")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :ICE "ICE")
SubClassOf(:ICE :Engine)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :LocomotiveUnit "LocomotiveUnit")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :LocomotiveUnit "LocomotiveUnits")
SubClassOf(:LocomotiveUnit :RailWayTransport)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :More_Cargo "More_Cargoes")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :More_Cargo "More_Cargo")
SubClassOf(:More_Cargo :Cargo)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Motorcycle "Motorcycles")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Motorcycle "Motorcycle")
SubClassOf(:Motorcycle :OnRoadAndOffRoadVehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :NarrowBody "NarrowBody")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :NarrowBody "NarrowBodies")
SubClassOf(:NarrowBody :PassengerAircraft)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :OnRoadAndOffRoadVehicle "OnRoadAndOffRoadVehicles")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :OnRoadAndOffRoadVehicle "OnRoadAndOffRoadVehicle")
EquivalentClasses(:OnRoadAndOffRoadVehicle ObjectIntersectionOf(DataHasValue(:canMoveOnOrIn "OnRoadOrOffRoad") :Vehicle))
SubClassOf(:OnRoadAndOffRoadVehicle :Vehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Passenger "Passenger")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Passenger "Passengers")
SubClassOf(:Passenger :People)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :PassengerAircraft "PassengerAircrafts")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :PassengerAircraft "PassengerAircraft")
SubClassOf(:PassengerAircraft :Aircraft)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :PassengerTrain "PassengerTrain")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :PassengerTrain "PassengerTrains")
EquivalentClasses(:PassengerTrain ObjectIntersectionOf(:RailWayTransport ObjectSomeValuesFrom(:hasParts :LocomotiveUnit) ObjectSomeValuesFrom(:hasParts :PassengerWagon)))
SubClassOf(:PassengerTrain :RailWayTransport)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :PassengerWagon "PassengerWagon")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :PassengerWagon "PassengerWagons")
EquivalentClasses(:PassengerWagon ObjectIntersectionOf(ObjectSomeValuesFrom(:canCarry :Passenger) :Wagon))
SubClassOf(:PassengerWagon :Wagon)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :People "Peoples")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :People "People")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Pilot "Pilots")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Pilot "Pilot")
SubClassOf(:Pilot :People)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :RailWayTransport "RailWayTransport")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :RailWayTransport "RailWayTransports")
EquivalentClasses(:RailWayTransport ObjectIntersectionOf(DataHasValue(:canMoveOnOrIn "Rail") :Vehicle))
SubClassOf(:RailWayTransport :Vehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Rotor "Rotor")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Rotor "Rotors")
SubClassOf(:Rotor :VehicleComponent)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :RotorSystem "RotorSystems")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :RotorSystem "RotorSystem")
SubClassOf(:RotorSystem :VehicleComponent)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :ShipAndVessel "ShipAndVessels")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :ShipAndVessel "ShipAndVessel")
EquivalentClasses(:ShipAndVessel ObjectIntersectionOf(DataHasValue(:canMoveOnOrIn "Water") :Vehicle))
SubClassOf(:ShipAndVessel :Vehicle)
SubClassOf(:ShipAndVessel ObjectSomeValuesFrom(:canCarry :Passenger))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Sprocket "Sprockets")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Sprocket "Sprocket")
SubClassOf(:Sprocket :VehicleComponent)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Steam "Steams")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Steam "Steam")
SubClassOf(:Steam :Engine)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Truck "Truck")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Truck "Trucks")
EquivalentClasses(:Truck ObjectIntersectionOf(ObjectSomeValuesFrom(:canCarry :Cargo) :OnRoadAndOffRoadVehicle))
SubClassOf(:Truck :OnRoadAndOffRoadVehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Vehicle "Vehicles")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Vehicle "Vehicle")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :VehicleComponent "VehicleComponents")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :VehicleComponent "VehicleComponent")
EquivalentClasses(:VehicleComponent ObjectIntersectionOf(ObjectSomeValuesFrom(:isPartOf owl:Thing) owl:Thing))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Vessel "Vessel")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Vessel "Vessels")
EquivalentClasses(:Vessel ObjectIntersectionOf(ObjectAllValuesFrom(:canCarry :Cargo) :ShipAndVessel))
SubClassOf(:Vessel :ShipAndVessel)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Wagon "Wagons")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Wagon "Wagon")
EquivalentClasses(:Wagon ObjectIntersectionOf(ObjectSomeValuesFrom(:isPartOf ObjectUnionOf(:PassengerTrain :FreightTrain)) :VehicleComponent))
SubClassOf(:Wagon :VehicleComponent)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Weapon "Weapon")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Weapon "Weapons")
SubClassOf(:Weapon :VehicleComponent)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Wheel "Wheels")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Wheel "Wheel")
SubClassOf(:Wheel :VehicleComponent)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :WideBody "WideBody")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :WideBody "WideBodies")
SubClassOf(:WideBody :PassengerAircraft)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Wing "Wing")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Wing "Wings")
SubClassOf(:Wing :VehicleComponent)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :WingAircraft "WingAircraft")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :WingAircraft "WingAircrafts")
EquivalentClasses(:WingAircraft ObjectIntersectionOf(ObjectSomeValuesFrom(:hasParts :FixedWing) :Aircraft))
SubClassOf(:WingAircraft :Aircraft)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :canBeCarriedBy "canBeCarriedBy")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :canBeCarriedBy "canBeCarriedBies")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :canBeCarriedBy "canBeCarriedBied")
InverseObjectProperties(:canCarry :canBeCarriedBy)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :canCarry "canCarries")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :canCarry "canCarry")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :canCarry "canCarried")
ObjectPropertyDomain(:canCarry :Vehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasParts "hasParts")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasParts "hasPartses")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasParts "hasPartsed")
InverseObjectProperties(:isPartOf :hasParts)
ObjectPropertyDomain(:hasParts ObjectUnionOf(:VehicleComponent :Vehicle))
ObjectPropertyRange(:hasParts ObjectUnionOf(:VehicleComponent :Vehicle))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :isPartOf "isPartOfed")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :isPartOf "isPartOfs")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :isPartOf "isPartOf")
SubObjectPropertyOf(:isPartOf owl:topObjectProperty)
ObjectPropertyDomain(:isPartOf ObjectUnionOf(:VehicleComponent :Vehicle))
ObjectPropertyRange(:isPartOf ObjectUnionOf(:VehicleComponent :Vehicle))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :moveOn "moveOned")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :moveOn "moveOn")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :moveOn "moveOns")
ObjectPropertyDomain(:moveOn :Vehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :canCarry "canCarries")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :canCarry "canCarry")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :canCarry "canCarried")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :canCarryCargo "canCarryCargoed")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :canCarryCargo "canCarryCargo")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :canCarryCargo "canCarryCargoes")
SubDataPropertyOf(:canCarryCargo :canCarry)
FunctionalDataProperty(:canCarryCargo)
DataPropertyRange(:canCarryCargo xsd:boolean)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :canCarryNumberOf "canCarryNumberOfs")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :canCarryNumberOf "canCarryNumberOf")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :canCarryNumberOf "canCarryNumberOfed")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :canCarryNumberOfPassenger "canCarryNumberOfPassengered")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :canCarryNumberOfPassenger "canCarryNumberOfPassenger")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :canCarryNumberOfPassenger "canCarryNumberOfPassengers")
SubDataPropertyOf(:canCarryNumberOfPassenger :canCarryNumberOf)
FunctionalDataProperty(:canCarryNumberOfPassenger)
DataPropertyDomain(:canCarryNumberOfPassenger :Vehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :canCarryPassenger "canCarryPassenger")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :canCarryPassenger "canCarryPassengers")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :canCarryPassenger "canCarryPassengered")
SubDataPropertyOf(:canCarryPassenger :canCarry)
FunctionalDataProperty(:canCarryPassenger)
DataPropertyRange(:canCarryPassenger xsd:boolean)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :canCarryTheAmountOfCargo "canCarryTheAmountOfCargoes")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :canCarryTheAmountOfCargo "canCarryTheAmountOfCargo")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :canCarryTheAmountOfCargo "canCarryTheAmountOfCargoed")
SubDataPropertyOf(:canCarryTheAmountOfCargo :canCarryNumberOf)
FunctionalDataProperty(:canCarryTheAmountOfCargo)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :canMoveOnOrIn "canMoveOnOrIn")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :canMoveOnOrIn "canMoveOnOrIned")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :canMoveOnOrIn "canMoveOnOrIns")
DataPropertyDomain(:canMoveOnOrIn :Vehicle)
DataPropertyRange(:canMoveOnOrIn DataOneOf("OnRoadOrOffRoad" "Rail" "Sky" "Water"))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasNumberOf "hasNumberOf")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasNumberOf "hasNumberOfs")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasNumberOf "hasNumberOfed")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasNumberOfRotors "hasNumberOfRotors")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasNumberOfRotors "hasNumberOfRotorses")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasNumberOfRotors "hasNumberOfRotorsed")
SubDataPropertyOf(:hasNumberOfRotors :hasNumberOf)
FunctionalDataProperty(:hasNumberOfRotors)
DataPropertyDomain(:hasNumberOfRotors :Vehicle)
DataPropertyRange(:hasNumberOfRotors xsd:integer)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasNumberOfSeats "hasNumberOfSeatses")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasNumberOfSeats "hasNumberOfSeats")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasNumberOfSeats "hasNumberOfSeatsed")
SubDataPropertyOf(:hasNumberOfSeats :hasNumberOf)
FunctionalDataProperty(:hasNumberOfSeats)
DataPropertyDomain(:hasNumberOfSeats :Vehicle)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasNumberOfWheels "hasNumberOfWheelses")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasNumberOfWheels "hasNumberOfWheels")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasNumberOfWheels "hasNumberOfWheelsed")
SubDataPropertyOf(:hasNumberOfWheels :hasNumberOf)
FunctionalDataProperty(:hasNumberOfWheels)
DataPropertyDomain(:hasNumberOfWheels :OnRoadAndOffRoadVehicle)
DataPropertyRange(:hasNumberOfWheels xsd:int)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasNumberOfWings "hasNumberOfWingsed")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasNumberOfWings "hasNumberOfWings")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasNumberOfWings "hasNumberOfWingses")
SubDataPropertyOf(:hasNumberOfWings :hasNumberOf)
FunctionalDataProperty(:hasNumberOfWings)
DataPropertyDomain(:hasNumberOfWings :Aircraft)
DataPropertyRange(:hasNumberOfWings xsd:integer)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :A10 "A10")
ClassAssertion(:Vehicle :A10)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :Airbus_A380 "Airbus_A380")
ClassAssertion(:Vehicle :Airbus_A380)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :AudiQ7 "AudiQ7")
ClassAssertion(:Vehicle :AudiQ7)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :BMWi5 "BMWi5")
ClassAssertion(:Vehicle :BMWi5)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :CoaxialRotorSystem "CoaxialRotorSystem")
ClassAssertion(:RotorSystem :CoaxialRotorSystem)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :Container "Container")
ClassAssertion(:Cargo :Container)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :DualRotorsSystem "DualRotorsSystem")
ClassAssertion(:RotorSystem :DualRotorsSystem)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :EC145 "EC145")
ClassAssertion(:Vehicle :EC145)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :F16 "F16")
ClassAssertion(:Vehicle :F16)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :Freightliner_M2 "Freightliner_M2")
ClassAssertion(:Vehicle :Freightliner_M2)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :HellfireMissile "HellfireMissile")
ClassAssertion(:Weapon :HellfireMissile)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :HondaCBR250 "HondaCBR250")
ClassAssertion(:Vehicle :HondaCBR250)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :HondaDream "HondaDream")
ClassAssertion(:Vehicle :HondaDream)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :Lifeboat "Lifeboat")
ClassAssertion(:Boat :Lifeboat)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :MachineGun "MachineGun")
ClassAssertion(:Weapon :MachineGun)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :Martin107 "Martin107")
ClassAssertion(:Vehicle :Martin107)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :Minivan "Minivan")
ClassAssertion(:Vehicle :Minivan)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :NOTARsystem "NOTARsystem")
ClassAssertion(:RotorSystem :NOTARsystem)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :QueenMarry2 "QueenMarry2")
ClassAssertion(:Vehicle :QueenMarry2)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :SingleCylinder "SingleCylinder")
ClassAssertion(:ICE :SingleCylinder)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :StraightWing "StraightWing")
ClassAssertion(:FixedWing :StraightWing)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :SweptWing "SweptWing")
ClassAssertion(:FixedWing :SweptWing)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :SwingWing "SwingWing")
ClassAssertion(:FixedWing :SwingWing)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :TandemRotorsSystem "TandemRotorsSystem")
ClassAssertion(:RotorSystem :TandemRotorsSystem)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :Titanic "Titanic")
ClassAssertion(:Vehicle :Titanic)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :YellowBus "YellowBus")
ClassAssertion(:Vehicle :YellowBus)
DLSafeRule(Annotation(rdfs:comment "OnRoadAndOffRoad Vehicle which has number of seats greater than or equal 4 and less than or equal 7 should be a Car"^^xsd:string) Annotation(rdfs:label "Car"^^xsd:string) Body(ClassAtom(:OnRoadAndOffRoadVehicle Variable(:x)) DataPropertyAtom(:hasNumberOfSeats Variable(:x) Variable(:s)) BuiltInAtom(swrlb:greaterThanOrEqual Variable(:s) "4"^^xsd:int) BuiltInAtom(swrlb:lessThanOrEqual Variable(:s) "7"^^xsd:int))Head(ClassAtom(:Car Variable(:x))))
DLSafeRule(Annotation(rdfs:comment "OnRoadAndOffRoadVehicle which can carry some cargo should be a Truck"^^xsd:string) Annotation(rdfs:label "Truck"^^xsd:string) Body(ClassAtom(:OnRoadAndOffRoadVehicle Variable(:x)) ObjectPropertyAtom(:canCarry Variable(:x) Variable(:y)) ClassAtom(:Cargo Variable(:y)))Head(ClassAtom(:Truck Variable(:x))))
DLSafeRule(Annotation(rdfs:comment ""^^xsd:string) Annotation(rdfs:label "FindVehicle"^^xsd:string) Body(ClassAtom(:Vehicle Variable(:v)))Head(BuiltInAtom(<http://sqwrl.stanford.edu/ontologies/built-ins/3.4/sqwrl.owl#select> Variable(:v))))
DLSafeRule(Annotation(rdfs:comment "Vessels are ships that can carry the amount of cargo greater than 100 (Tons)."^^xsd:string) Annotation(rdfs:label "VesselFact1"^^xsd:string) Body(ClassAtom(:ShipAndVessel Variable(:x)) DataPropertyAtom(:canCarryTheAmountOfCargo Variable(:x) Variable(:y)) BuiltInAtom(swrlb:greaterThan Variable(:y) "100"^^xsd:int))Head(ClassAtom(:Vessel Variable(:x))))
DLSafeRule(Annotation(rdfs:comment "Vehicle that has wheel(s) should be OnRoadAndOffRoadVehicle"^^xsd:string) Annotation(rdfs:label "OnRoadAndOffRoadVehicle"^^xsd:string) Body(DataPropertyAtom(:hasNumberOfWheels Variable(:x) Variable(:w)))Head(ClassAtom(:OnRoadAndOffRoadVehicle Variable(:x))))
DLSafeRule(Annotation(rdfs:comment ""^^xsd:string) Annotation(rdfs:label "Find all can carry some things"^^xsd:string) Body(ObjectPropertyAtom(:canCarry Variable(:x) Variable(:y)))Head(BuiltInAtom(<http://sqwrl.stanford.edu/ontologies/built-ins/3.4/sqwrl.owl#select> Variable(:x) Variable(:y))))
DLSafeRule(Annotation(rdfs:comment "OnRoadAndOffRoadVehicle which has number of seats greater than 20 will be a Bus"^^xsd:string) Annotation(rdfs:label "Bus"^^xsd:string) Body(ClassAtom(:OnRoadAndOffRoadVehicle Variable(:x)) DataPropertyAtom(:hasNumberOfSeats Variable(:x) Variable(:s)) BuiltInAtom(swrlb:greaterThan Variable(:s) "20"^^xsd:int))Head(ClassAtom(:Bus Variable(:x))))
DLSafeRule(Annotation(rdfs:comment "Aircraft that carry any passenger (number of passenger > 0)should be Passenger Aircraft"^^xsd:string) Annotation(rdfs:label "PassengerAircraft1"^^xsd:string) Body(ClassAtom(:Aircraft Variable(:x)) DataPropertyAtom(:canCarryNumberOfPassenger Variable(:x) Variable(:y)) BuiltInAtom(swrlb:greaterThan Variable(:y) "0"^^xsd:int))Head(ClassAtom(:PassengerAircraft Variable(:x))))
DLSafeRule(Annotation(rdfs:comment ""^^xsd:string) Annotation(rdfs:label "OnRoadAndOffRoadVehicle2"^^xsd:string) Body(DataPropertyAtom(:canMoveOnOrIn Variable(:x) "OnRoadOrOffRoad"^^xsd:string) ClassAtom(:Vehicle Variable(:x)))Head(ClassAtom(:OnRoadAndOffRoadVehicle Variable(:x))))
DLSafeRule(Annotation(rdfs:comment ""^^xsd:string) Annotation(rdfs:label "Find all can carry passenger"^^xsd:string) Body(BuiltInAtom(swrlb:greaterThan Variable(:y) "0"^^xsd:int) DataPropertyAtom(:canCarryNumberOfPassenger Variable(:x) Variable(:y)))Head(BuiltInAtom(<http://sqwrl.stanford.edu/ontologies/built-ins/3.4/sqwrl.owl#select> Variable(:x) Variable(:y))))
DLSafeRule(Annotation(rdfs:comment "Vehicle which can move on the sky should be an Aircraft"^^xsd:string) Annotation(rdfs:label "Aircraft"^^xsd:string) Body(DataPropertyAtom(:canMoveOnOrIn Variable(:x) "Sky"^^xsd:string) ClassAtom(:Vehicle Variable(:x)))Head(ClassAtom(:Aircraft Variable(:x))))
DLSafeRule(Annotation(rdfs:comment "OnRoadAndOffRoad Vehicle which canCarryCargo should be a Truck too"^^xsd:string) Annotation(rdfs:label "Truck2"^^xsd:string) Body(DataPropertyAtom(:canCarryCargo Variable(:x) "true"^^xsd:boolean) ClassAtom(:OnRoadAndOffRoadVehicle Variable(:x)))Head(ClassAtom(:Truck Variable(:x))))
DLSafeRule(Annotation(rdfs:comment "Aircraft which has fixed-wing should be a WingAircraft"^^xsd:string) Annotation(rdfs:label "WingAircraft"^^xsd:string) Body(ClassAtom(:Aircraft Variable(:x)) ObjectPropertyAtom(:hasParts Variable(:x) Variable(:y)) ClassAtom(:FixedWing Variable(:y)))Head(ClassAtom(:WingAircraft Variable(:x))))
DLSafeRule(Annotation(rdfs:comment ""^^xsd:string) Annotation(rdfs:label "FindCar"^^xsd:string) Body(DataPropertyAtom(:hasNumberOfSeats Variable(:x) Variable(:s)))Head(BuiltInAtom(<http://sqwrl.stanford.edu/ontologies/built-ins/3.4/sqwrl.owl#select> Variable(:x) Variable(:s))))
DLSafeRule(Annotation(rdfs:comment "Cruisers are capable in carrying greater than 500 passengers"^^xsd:string) Annotation(rdfs:label "CruiserFact1"^^xsd:string) Body(ClassAtom(:ShipAndVessel Variable(:x)) DataPropertyAtom(:canCarryNumberOfPassenger Variable(:x) Variable(:y)) BuiltInAtom(swrlb:greaterThan Variable(:y) "500"^^xsd:int))Head(ClassAtom(:Cruiser Variable(:x))))
DLSafeRule(Annotation(rdfs:comment "Aircraft which can carry any weapon will classify as a FighterAircraft"^^xsd:string) Annotation(rdfs:label "FighterJet"^^xsd:string) Body(ClassAtom(:Aircraft Variable(:x)) ObjectPropertyAtom(:canCarry Variable(:x) Variable(:y)) ClassAtom(:Weapon Variable(:y)))Head(ClassAtom(:FighterAircraft Variable(:x))))
)